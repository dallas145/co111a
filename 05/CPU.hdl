// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Mux16(a=instruction,b=back,sel=instruction[15],out=ArIN);
    And(a=instruction[15],b=instruction[5],out=ALUtoAr);
    Not(in=instruction[15],out=isA);
    Or(a=ALUtoAr,b=isA,out=Arload);
    ARegister(in=ArIN,load=Arload,out=MUXtwoIN,out[0..14]=addressM);
    Mux16(a=MUXtwoIN,b=inM,sel=instruction[12],out=AluY);
    And(a=instruction[15],b=instruction[4],out=Dload);
    DRegister(in=back,load=Dload,out=AluX);
    //instruction[6..11]=zx,nx,zy,ny,f,no
    ALU(x=AluX,y=AluY,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=back,zr=zrout,ng=ngout);
    
    PC(in=MUXtwoIN,load=pcload,reset=reset,inc=true,out[0..14]=pc);

    Mux(a=false,b=true,sel=instruction[2],out=j2);
    Mux(a=false,b=true,sel=instruction[1],out=j1);
    Mux(a=false,b=true,sel=instruction[0],out=j0);
    //JMP
    And(a=j2,b=j1,out=jmp0);
    And(a=jmp0,b=j0,out=JMP);
    And(a=j1,b=zrout,out=EQ);
    And(a=j2,b=ngout,out=LT);
    Not(in=ngout,out=nngout);
    And(a=nngout,b=j0,out=GT0);
    Not(in=zrout,out=nzrout);
    And(a=nzrout,b=GT0,out=GT);
    Or8Way(in[0]=JMP,in[1]=EQ,in[2]=LT,in[3]=GT,in[4..7]=false,out=pcload0);
    And(a=instruction[15],b=pcload0,out=pcload);
    And(a=instruction[3],b=instruction[15],out=WM);
    Mux(a=false,b=true,sel=WM,out=writeM);
}