// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   //if zx,x=0
   Mux16(a=x,b=false,sel=zx,out=afterzx);

   //if nx,x=!x
   Not16(in=afterzx,out=nafterzx);
   Mux16(a=afterzx,b=nafterzx,sel=nx,out=afternx);

   //if zy,y=0
   Mux16(a=y,b=false,sel=zy,out=afterzy);

   //if ny,y=!y
   Not16(in=afterzy,out=nafterzy);
   Mux16(a=afterzy,b=nafterzy,sel=ny,out=afterny);

   //if f,out=x+y;else,out=x&y
   Add16(a=afternx,b=afterny,out=xplusy);
   And16(a=afternx,b=afterny,out=xandy);
   Mux16(a=xandy,b=xplusy,sel=f,out=afterf);

   //if no,out=!out
   Not16(in=afterf,out=nafterf);
   Mux16(a=afterf,b=nafterf,sel=no,out[0..7]=bzr07,out[8..14]=bzr814,out[15]=bzr15,out=out);

   //if out==0,zr=1
   Or8Way(in=bzr07,out=zr07);
   Or8Way(in[0..6]=bzr814,in[7]=bzr15,out=zr815);
   Or(a=zr07,b=zr815,out=nzr);
   Not(in=nzr,out=zr);

   //if out>0,ng=1
   Mux(a=false,b=true,sel=bzr15,out=ng);
}